{"ast":null,"code":"// routes/auth.js\nconst express = require(\"express\");\nconst router = express.Router();\nconst bcrypt = require(\"bcryptjs\");\nconst User = require(\"../models/User\");\nrouter.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  console.log(\"Login Request:\", email, password);\n  try {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: \"User not found\"\n      });\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    console.log(\"Password match?\", isMatch);\n    if (!isMatch) {\n      return res.status(401).json({\n        success: false,\n        message: \"Incorrect password\"\n      });\n    }\n    return res.status(200).json({\n      success: true,\n      user: {\n        _id: user._id,\n        email: user.email,\n        name: user.name || \"User\"\n      }\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error.message);\n    return res.status(500).json({\n      success: false,\n      message: \"Server error\"\n    });\n  }\n});","map":{"version":3,"names":["express","require","router","Router","bcrypt","User","post","req","res","email","password","body","console","log","user","findOne","status","json","success","message","isMatch","compare","_id","name","error"],"sources":["C:/Users/Akshay/Desktop/Complaint Tracker/frontend/src/pages/Login.js"],"sourcesContent":["// routes/auth.js\r\nconst express = require(\"express\");\r\nconst router = express.Router();\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst User = require(\"../models/User\");\r\n\r\nrouter.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  console.log(\"Login Request:\", email, password);\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ success: false, message: \"User not found\" });\r\n    }\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    console.log(\"Password match?\", isMatch);\r\n\r\n    if (!isMatch) {\r\n      return res.status(401).json({ success: false, message: \"Incorrect password\" });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      user: {\r\n        _id: user._id,\r\n        email: user.email,\r\n        name: user.name || \"User\",\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error.message);\r\n    return res.status(500).json({ success: false, message: \"Server error\" });\r\n  }\r\n});\r\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMI,IAAI,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;AAEtCC,MAAM,CAACI,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEpCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,KAAK,EAAEC,QAAQ,CAAC;EAE9C,IAAI;IACF,MAAMI,IAAI,GAAG,MAAMT,IAAI,CAACU,OAAO,CAAC;MAAEN;IAAM,CAAC,CAAC;IAE1C,IAAI,CAACK,IAAI,EAAE;MACT,OAAON,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAiB,CAAC,CAAC;IAC5E;IAEA,MAAMC,OAAO,GAAG,MAAMhB,MAAM,CAACiB,OAAO,CAACX,QAAQ,EAAEI,IAAI,CAACJ,QAAQ,CAAC;IAC7DE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEO,OAAO,CAAC;IAEvC,IAAI,CAACA,OAAO,EAAE;MACZ,OAAOZ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAqB,CAAC,CAAC;IAChF;IAEA,OAAOX,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,IAAI;MACbJ,IAAI,EAAE;QACJQ,GAAG,EAAER,IAAI,CAACQ,GAAG;QACbb,KAAK,EAAEK,IAAI,CAACL,KAAK;QACjBc,IAAI,EAAET,IAAI,CAACS,IAAI,IAAI;MACrB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACL,OAAO,CAAC;IAC5C,OAAOX,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAe,CAAC,CAAC;EAC1E;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}